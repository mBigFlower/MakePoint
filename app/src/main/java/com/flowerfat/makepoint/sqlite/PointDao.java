package com.flowerfat.makepoint.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.flowerfat.makepoint.sqlite.Point;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POINT".
*/
public class PointDao extends AbstractDao<Point, Long> {

    public static final String TABLENAME = "POINT";

    /**
     * Properties of entity Point.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Point1 = new Property(1, String.class, "point1", false, "POINT1");
        public final static Property Point2 = new Property(2, String.class, "point2", false, "POINT2");
        public final static Property Point3 = new Property(3, String.class, "point3", false, "POINT3");
        public final static Property Point4 = new Property(4, String.class, "point4", false, "POINT4");
        public final static Property Date = new Property(5, String.class, "date", false, "DATE");
    };


    public PointDao(DaoConfig config) {
        super(config);
    }
    
    public PointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"POINT1\" TEXT," + // 1: point1
                "\"POINT2\" TEXT," + // 2: point2
                "\"POINT3\" TEXT," + // 3: point3
                "\"POINT4\" TEXT," + // 4: point4
                "\"DATE\" TEXT);"); // 5: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POINT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Point entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String point1 = entity.getPoint1();
        if (point1 != null) {
            stmt.bindString(2, point1);
        }
 
        String point2 = entity.getPoint2();
        if (point2 != null) {
            stmt.bindString(3, point2);
        }
 
        String point3 = entity.getPoint3();
        if (point3 != null) {
            stmt.bindString(4, point3);
        }
 
        String point4 = entity.getPoint4();
        if (point4 != null) {
            stmt.bindString(5, point4);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Point readEntity(Cursor cursor, int offset) {
        Point entity = new Point( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // point1
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // point2
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // point3
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // point4
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Point entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPoint1(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPoint2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPoint3(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPoint4(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Point entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Point entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
